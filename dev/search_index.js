var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/#Endmember-Library-Functions","page":"API","title":"Endmember Library Functions","text":"","category":"section"},{"location":"api/#SpectralUnmixing.SpectralLibrary","page":"API","title":"SpectralUnmixing.SpectralLibrary","text":"mutable struct SpectralLibrary\n\nA structure for managing spectral data from a file, supporting class labels, scaling, and wavelength filtering.\n\n\n\n\n\n","category":"type"},{"location":"api/#SpectralUnmixing.SpectralLibrary-Tuple{String, String}","page":"API","title":"SpectralUnmixing.SpectralLibrary","text":"SpectralLibrary(file_name::String,\n    class_header_name::String,\n    spectral_starting_column::Int64=2,\n    truncate_end_columns::Int64=0,\n    class_valid_keys=nothing,\n    scale_factor=1.0,\n    wavelength_regions_ignore=[0, 440, 1310, 1490, 1770, 2050, 2440, 2880])\n\nConstructor for the SpectralLibrary struct.\n\nArguments\n\nfile_name::String: Endmember Library data file name, CSV-like.\nclass_header_name::String: Column for class labels in data file.\nspectral_starting_column::Int64=2: Column for start of spectral data\ntruncate_end_columns::Int64=0: Number of columns to ignore from end of data.\nclass_valid_keys=nothing: List of valid class labels.\nscale_factor::Float64=1.0: Spectral scaling factor.\nwavelength_regions_ignore=[0,440,1310,1490,1770,2050,2440,2880]: List of wavelength   regions to ignore as beginning/end pairs in list.\n\n\n\n\n\n","category":"method"},{"location":"api/#SpectralUnmixing.load_data!","page":"API","title":"SpectralUnmixing.load_data!","text":"load_data!(library::SpectralLibrary)\n\nLoad and preprocess spectral data associated with the SpectralLibrary object.\n\nLoad spectral data from a CSV-like file library.file_name.\nProcess wavelength ignore regions into paired sets library.wavelength_regions_ignore.\nLoad library.spectra, library.classes, and library.class_valid_keys.\nSort and load library.wavelengths as nanometers and rearrange spectral data accordingly.\nGenerate mask library.good_bands based on library.wavelength_regions_ignore.\n\nReturns\n\nThe updated SpectralLibrary instance with loaded and processed data.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.filter_by_class!","page":"API","title":"SpectralUnmixing.filter_by_class!","text":"filter_by_class!(library::SpectralLibrary)\n\nFilter spectra in the SpectralLibrary based on library.class_valid_keys.\n\nUpdate library.spectra and library.classes to include only those matching `library.\n\nclassvalidkeys`.\n\nNotes\n\nThis function modifies the library in place.\nIf library.class_valid_keys is nothing, logs a message indicating that no filtering\n\nwill occur, and exits without making any changes.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.read_envi_wavelengths","page":"API","title":"SpectralUnmixing.read_envi_wavelengths","text":"read_envi_wavelengths(filename::String, nm::Bool=true)\n\nRead wavelength data from an ENVI header file with option to convert from microns to nanometers.\n\nIf no wavelengths are found, returns nothing.\n\nNotes\n\nThe function constructs the expected header filename by replacing the extension of the\n\ngiven filename with .hdr.\n\nThis function logs an error if no wavelength data is found in the header file.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.interpolate_library_to_new_wavelengths!","page":"API","title":"SpectralUnmixing.interpolate_library_to_new_wavelengths!","text":"interpolate_library_to_new_wavelengths!(library::SpectralLibrary, new_wavelengths::Array\n{Float64})\n\nInterpolate library spectra to new wavelengths.\n\nPerform linear interpolation, applying a flat extrapolation boundary condition.\nUpdate library.wavelengths, library.good_bands, and library.spectra matrix to the\n\nresampled spectra.\n\nNotes\n\nThis function modifies the library in place\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.remove_wavelength_region_inplace!","page":"API","title":"SpectralUnmixing.remove_wavelength_region_inplace!","text":"remove_wavelength_region_inplace!(library::SpectralLibrary, set_as_nans::Bool=false)\n\nRemove wavelength regions from library outside library.good_bands either by setting them to NaN or by filtering them out.\n\nNotes\n\nThis function modifies the library in place.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.scale_library!","page":"API","title":"SpectralUnmixing.scale_library!","text":"scale_library!(library::SpectralLibrary, scaling_factor=nothing)\n\nScale the spectral data in the SpectralLibrary by the library's defined scale factor (default) or a specified scaling factor.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.reduce_endmembers_nmf!","page":"API","title":"SpectralUnmixing.reduce_endmembers_nmf!","text":"reduce_endmembers_nmf!(library::SpectralLibrary, max_endmembers_per_class::Int64)\n\nReduce the number of endmembers in the spectral library using Non-negative Matrix Factorization (NMF).\n\nFor each class in library.class_valid_keys, apply NMF to the spectra subset to identify\n\nthe specified maximum number of endmembers.\n\nUpdate library.classes and library.spectra to contain the reduced set of endmembers.\n\nNotes\n\nThis function modifies the library in place.\nOnly library.good_bands will be considered in the NMF computation.\nThe NMF uses a maximum of 500 iterations with a tolerance of 1.0e-2 for convergence.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.reduce_endmembers_kmeans!","page":"API","title":"SpectralUnmixing.reduce_endmembers_kmeans!","text":"reduce_endmembers_kmeans!(library::SpectralLibrary, max_endmembers_per_class::Int64)\n\nReduce the number of endmembers in the spectral library using K-means clustering.\n\nFor each class in library.class_valid_keys, apply K-means clustering to the spectra\n\nsubset to identify the specified maximum number of endmembers from cluster centers.\n\nUpdate library.classes and library.spectra to contain the reduced set of endmembers.\n\nNotes\n\nThis function modifies the library in place.\nOnly library.good_bands will be considered in the K-means computation.\nThe K-means algorithm is run with a maximum of 1000 iterations.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.reduce_endmembers_pca!","page":"API","title":"SpectralUnmixing.reduce_endmembers_pca!","text":"reduce_endmembers_pca!(library::SpectralLibrary, max_endmembers_per_class::Int64)\n\nReduce the number of endmembers in the spectral library using Principal Component Analysis (PCA).\n\nFor each class in library.class_valid_keys, apply PCA to the spectra subset to identify\n\nthe specified maximum number of endmembers.\n\nUpdate library.classes and library.spectra to contain the reduced set of endmembers.\n\nNotes\n\nThis function modifies the library in place.\nOnly library.good_bands will be considered in the PCA computation.\nThe PCA is truncated to max_endmembers_per_class PCs per endmember class.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.brightness_normalize!","page":"API","title":"SpectralUnmixing.brightness_normalize!","text":"brightness_normalize!(library::SpectralLibrary)\n\nNormalize library.spectra based on the RMS brightness of library.good_bands.\n\nNotes\n\nThis function modifies the library in place.\nOnly considers library.good_bands in the brightness calculation.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.split_library","page":"API","title":"SpectralUnmixing.split_library","text":"split_library(library::SpectralLibrary, split_fraction::Float64)\n\nSplit a SpectralLibrary into two new libraries based on a specified fraction of the total spectra.\n\nReturns\n\nTuple{SpectralLibrary, SpectralLibrary} with each output library a random,\n\nmutually exclusive subset of the original library containing split_fraction and 1 - split_fraction of the spectra, respectively.\n\nNotes\n\nThe split is random; consecutive calls with the same library may yield different\n\nresults.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.prepare_combinations","page":"API","title":"SpectralUnmixing.prepare_combinations","text":"prepare_combinations(library::SpectralLibrary, combination_type::String)\n\nPrepare the set of class indices for the specified combination type.\n\nCurrently only supports \"class-even\": returns the list of indices grouped by class.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.prepare_options","page":"API","title":"SpectralUnmixing.prepare_options","text":"prepare_options(library::SpectralLibrary, combination_type::String,\n                 num_endmembers::Vector{Int64}, class_idx)\n\nPrepare combinations of endmembers based on the specified combination type.\n\nCombination type options:\n\"class-even\"`: Generate all combinations where one endmember is selected from each class.\n\"all\": Generate all possible combinations of num_endmembers spectra.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.scale_data","page":"API","title":"SpectralUnmixing.scale_data","text":"scale_data(refl::Matrix{Float64}, wavelengths::Vector{Float64}, criteria::String,\n    bad_regions_wl=[[1300, 1500], [1800, 2000]])\n\nScale the reflectance data based on specified criteria.\n\nArguments\n\nrefl::Matrix{Float64}: Reflectance data either size (n,) or (m,n), where n is the\n\nnumber of bands and m the number of pixels.\n\nwavelengths::Vector{Float64}: A vector of wavelengths of size (n,).\ncriteria::String: Normalization options:\n\"none\": No scaling will be applied, and the original reflectance data will be\nreturned.\n\"brightness\": The data will be normalized based on brightness, excluding specified\nbad wavelength regions [1300, 1500] and [1800, 2000].\nA specific wavelength (as a string): The data will be normalized using the reflectance\nvalue at this wavelength.\nbad_regions_wl=[[1300, 1500], [1800, 2000]]: List of wavelength regions (in nm) to\n\nignore.\n\nReturns\n\nA matrix of scaled reflectance data with same dimensions as refl.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.get_good_bands_mask","page":"API","title":"SpectralUnmixing.get_good_bands_mask","text":"get_good_bands_mask(wavelengths::Array{Float64}, wavelength_pairs)\n\nReturn a boolean mask for wavelengths outside the specified wavelength ranges given by wavelength_pairs.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.save_data","page":"API","title":"SpectralUnmixing.save_data","text":"save_data(library::SpectralLibrary, output_filename::String;\nclass_label_name::String=\"Label\")\n\nWrte the spectra and classes from a SpectralLibrary to a CSV file.\n\nThe output CSV will have the class labels as the first column under class_label_name,\n\nfollowed by columns for each wavelength with the spectra values filling the corresponding rows.\n\n\n\n\n\n","category":"function"},{"location":"api/#Unmixing-and-Simulation-Functions","page":"API","title":"Unmixing and Simulation Functions","text":"","category":"section"},{"location":"api/#SpectralUnmixing.unmix_pixel","page":"API","title":"SpectralUnmixing.unmix_pixel","text":"unmix_pixel(library::SpectralLibrary, img_dat_input::Array{Float64}, unc_dat,\n            class_idx, options, mode::String, n_mc::Int64,\n            num_endmembers::Vector{Int64}, normalization::String, optimization::String,\n            max_combinations::Int64, combination_type::String)\n\nUnmix a pixel's spectral data using a given spectral library with options for SMA or MESMA and various Monte Carlo and optimization approaches.\n\nArguments\n\nlibrary::SpectralLibrary: Endmember library for unmixing.\nimg_dat_input::Array{Float64}: Spectral data of the pixel.\nunc_dat: An optional array of uncertainty in the pixel spectral data.\nclass_idx: A collection of indices indicating class memberships for different\n\nendmembers in library.spectra. See also prepare_combinations, prepare_options\n\noptions: A collection of potential endmember combinations for the unmixing process. See\n\nalso prepare_options.\n\nmode::String: Determines the unmixing approach:\n\"sma\": Select endmembers randomly for MC unmixing, returns mean fractions.\n\"sma-best\": SMA and output best (lowest cost) MC fraction.\n\"mesma\": Evaluate different combinations of endmembers representing each class.\n\"mesma-best\": MESMA and output best (lowest cost) MC fraction.\nn_mc::Int64: Number of MC iterations.\nnum_endmembers::Vector{Int64}: The number of endmembers to consider.\nnormalization::String: The normalization method to apply to the spectral data. See\n\nscale_data.\n\noptimization::String: The optimization approach for unmixing: (e.g., \"bvls\",\n\n\"ldsqp\", or \"inverse\"). Can optionally contain \"pinv\" or \"qr\" to specify the inverse method, if applicable.\n\nmax_combinations::Int64: Maximum number of combinations to consider.\ncombination_type::String: The type of combination (e.g., \"class-even\"). See also\n\nprepare_combinations, prepare_options, get_sma_permutation.\n\nReturns\n\nA tuple containing:\noutput_mixture::Vector{Float64}: The estimated fraction of each class in the\nlibrary, appended with the brightness.\noutput_mixture_var::Vector{Float64}: The variance of each class in the library,\nappended with the brightness variance.\noutput_comp_frac::Vector{Float64}: The estimated fraction of each endmember in the\nlibrary, appended with the brightness.\noutput_comp_frac_var::Vector{Float64}: The variance of each endmember in the\nlibrary, appended with the brightness variance.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.simulate_pixel","page":"API","title":"SpectralUnmixing.simulate_pixel","text":"simulate_pixel(library::SpectralLibrary, max_components::Int64,\n                combination_type::String, seed::Int64)\n\nSimulate reflectance data for a pixel from a random normalized distribution of endmembers in library.\n\nArguments\n\nlibrary::SpectralLibrary: Spectral library containing endmembers and class\n\ninformation.\n\nmax_components::Int64: Maximum number of endmembers to use in the simulation.\ncombination_type::String: The type of combinations to consider when selecting\n\nendmembers (e.g., \"all\" or \"class-even\").\n\nseed::Int64: Seed for the random number generator.\n\nReturns\n\nA tuple containing:\nsimulated_rfl: Simulated reflectance spectrum of the pixel.\noutput_distribution: A vector of endmember contributions for the pixel.\noutput_distribution_classes: A vector of contributions of each unique class.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.unmix_line","page":"API","title":"SpectralUnmixing.unmix_line","text":"unmix_line(line::Int64, reflectance_file::String, mode::String,\n            refl_nodata::Float64, refl_scale::Float64,\n            normalization::String, library::SpectralLibrary,\n            reflectance_uncertainty_file::String=\"\", n_mc::Int64=1,\n            combination_type::String=\"all\",\n            num_endmembers::Vector{Int64}=[2, 3],\n            max_combinations::Int64=-1, optimization=\"bvls\")\n\nUnmix a specific line (row of pixels) of reflectance data. See also load_line, unmix_pixel.\n\nArguments\n\nline::Int64: Index of the line to unmix.\nreflectance_file::String: Path to the reflectance data.\nmode::String: The mode of unmixing to be used (e.g., \"sma\", \"mesma-best\"). See\n\nunmix_pixel).\n\nrefl_nodata::Float64: The no data value in the reflectance file.\nrefl_scale::Float64: Scaling factor for the reflectance data.\nnormalization::String: The normalization method to apply to the reflectance data. See\n\nscale_data.\n\nlibrary::SpectralLibrary: Spectral library object containing endmembers for unmixing.\nreflectance_uncertainty_file::String: Optional path to the reflectance uncertainty file.\nn_mc::Int64=1: Number of Monte Carlo iterations to perform.\ncombination_type::String=\"all\": The type of endmember combinations to prepare for\n\nunmixing. See also prepare_combinations, prepare_options.\n\nnum_endmembers::Vector{Int64}=[2, 3]: The number of endmembers to consider in\n\ncombinations.\n\nmax_combinations::Int64=-1: Maximum number of combinations to consider, defaults to no\n\nlimit.\n\noptimization::String: The optimization method to use (default is \"bvls\"). See also\n\nunmix_pixel.\n\nReturns\n\nA tuple containing (see also unmix_pixel):\nThe line index.\nEstimated class fractions for each pixel in the line.\nA boolean mask of pixels with valid data.\nStandard deviations of the mixture results (if applicable).\nComplete fractions for each endmember in the unmixing of each pixel.\n\nNotes\n\nInitializes a random seed for reproducibility.\nLogs the execution time for unmixing a line.\nReturns nothing if input data is invalid or missing.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.unmix_and_write_line","page":"API","title":"SpectralUnmixing.unmix_and_write_line","text":"unmix_and_write_line(line::Int64, reflectance_file::String, mode::String,\n                      refl_nodata::Float64, refl_scale::Float64,\n                      normalization::String, library::SpectralLibrary,\n                      output_files::Vector{String}, write_complete_fractions::Bool,\n                      reflectance_uncertainty_file::String=\"\", n_mc::Int64=1,\n                      combination_type::String=\"all\",\n                      num_endmembers::Vector{Int64}=[2, 3],\n                      max_combinations::Int64=-1, optimization=\"bvls\")\n\nUnmix the specified line of reflectance_file and write the results to output_files.\n\nCalls [unmix_line(@ref)] and write_line_results, see for arguments.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.get_sma_permutation","page":"API","title":"SpectralUnmixing.get_sma_permutation","text":"get_sma_permutation(class_idx, num_endmembers::Vector{Int64},\n                    combination_type::String, library_length::Int64)\n\nGenerate a permutation of endmember indices for SMA.\n\nArguments\n\nclass_idx: A collection (such as a vector of vectors) of size n where each element\n\nis a set of indices corresponding to endmembers belonging to one class.\n\nnum_endmembers::Vector{Int64}: Desired number of endmembers to select. The first\n\nelement specifies the number of endmembers to permute; if it is -1, all endmembers in library will be included.\n\ncombination_type::String: Permutation type options:\n\"class-even\": Randomly select one endmember from each class until the required number\nof endmembers is selected.\nAny other types: Randomly selects endmembers from the entire library.\nlibrary_length::Int64: Size of the entire endmember library.\n\nReturns\n\nA vector of integers representing the permuted endmember indices.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.results_from_mc","page":"API","title":"SpectralUnmixing.results_from_mc","text":"results_from_mc(results::Matrix{Float64}, cost::Vector{Float64}, mode::String)\n\nProcess Monte Carlo simulations and return variance and result based on mode.\n\nArguments\n\nresults::Matrix{Float64}: Outcomes of MC simulations, where each row represents a\n\nsimulation and each column corresponds to a different variable.\n\ncost::Vector{Float64}: A vector of Float64 values representing the cost associated\n\nwith each simulation, used to determine the best result when applicable.\n\nmode::String: How to process the results. It can be:\nContain \"best\": Returns the result corresponding to the simulation with the lowest\ncost.\nAny other value: Computes and returns the mean of the results across all simulations.\n\nReturns\n\nA tuple containing:\noutput::Vector{Float64}: MC simulation results\noutput_var::Vector{Float64}: Standard deviation of the results for each variable, or\nnothing if there is only one simulation.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dataset-Functions","page":"API","title":"Dataset Functions","text":"","category":"section"},{"location":"api/#SpectralUnmixing.initiate_output_datasets","page":"API","title":"SpectralUnmixing.initiate_output_datasets","text":"initiate_output_datasets(output_files::Vector{String}, x_len::Int64, y_len::Int64,\n                         output_bands::Vector, reference_dataset::ArchGDAL.IDataset)\n\nInitialize multiple output raster datasets in ENVI format with specified dimensions and band information using a reference dataset for projection and geotransformation.\n\nArguments\n\noutput_files::Vector{String}: File paths of the output datasets. Each entry corresponds\n\nto a separate output raster.\n\nx_len::Int64: Width of the output datasets.\ny_len::Int64: Height of the output datasets.\noutput_bands::Vector: Number of bands for each output dataset. The length of this\n\nvector must match the length of output_files.\n\nreference_dataset::ArchGDAL.IDataset: Reference dataset object from which projection\n\nand geotransformation information will be copied.\n\nNotes\n\nAll bands in the output datasets are initialized with the no-data value of -9999.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.set_band_names","page":"API","title":"SpectralUnmixing.set_band_names","text":"set_band_names(filename::String, band_names::Vector)\n\nSet the names of the bands in a raster dataset specified by the given filename.\n\nArguments\n\nfilename::String: Path to the raster file. The file must be in a format supported by\n\nGDAL. The data file is updated in place.\n\nband_names::Vector: A vector of strings containing the new names for each band in the\n\nraster dataset. The length of this vector must match the number of bands in the raster.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.write_results","page":"API","title":"SpectralUnmixing.write_results","text":"write_results(output_files::Vector{String}, output_bands::Vector, x_len::Int64,\n              y_len::Int64, results, args)\n\nWrite processed results to specified output ENVI raster files, including primary outputs, uncertainty estimates, and complete fractions, based on the provided parameters.\n\nArguments\n\noutput_files::Vector{String}: File paths of the output datasets to be created or\n\nupdated. Each entry corresponds to a separate output raster.\n\noutput_bands::Vector: Number of bands for each output dataset. The length of this\n\nvector must match the number of output files.\n\nx_len::Int64: Width of the output datasets.\ny_len::Int64: Height of the output datasets.\nresults: A collection of results, where each result is expected to be a tuple or\n\nsimilar structure. Specific elements contain the data to be written to the output datasets.\n\nargs: An object or structure containing additional parameters that dictate the\n\nwriting behavior. Available options are:     - args.n_mc: If greater than 1, an uncertainty output is also written to the second     output file.     - args.write_complete_fractions: If set to 1, write complete fractions to the     subsequent output file.\n\nNotes\n\nThe primary output is initialized with a no-data value of -9999 and written to the first output file specified in output_files.\nEach output array is permuted to match the desired dimensions before writing.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.write_line_results","page":"API","title":"SpectralUnmixing.write_line_results","text":"write_line_results(output_files::Vector{String}, results, n_mc::Int64,\n                   write_complete_fractions::Bool)\n\nWrite line-based results to specified output ENVI raster files, including primary results, uncertainty estimates, and complete fractions based on provided parameters.\n\nArguments\n\noutput_files::Vector{String}: File paths of the output datasets to be created or\n\nupdated. Each entry corresponds to a separate output raster.\n\nresults: A collection of results, where each entry is expected to be a tuple or\n\nsimilar structure. Specific elements contain the data to be written to the output datasets.\n\nn_mc::Int64: If greater than one, uncertainty outputs will be written to the\n\nsubsequent output file.\n\nwrite_complete_fractions::Bool: Indicates whether to write complete fractions\n\nto the subsequent output file.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.load_line","page":"API","title":"SpectralUnmixing.load_line","text":"load_line(reflectance_file::String, reflectance_uncertainty_file::String,\n           line::Int64, good_bands::Array{Bool}, refl_nodata::Float64)\n\nLoad a specific line (row) of reflectance data and its associated uncertainty from raster files, filtering based on specified good bands and no-data values.\n\nArguments\n\nreflectance_file::String: Path to the ENVI reflectance raster file.\nreflectance_uncertainty_file::String: Path to the uncertainty raster file corresponding\n\nto the reflectance data. An empty string indicates no uncertainty data.\n\nline::Int64: Line (row) of the raster data to be loaded.\ngood_bands::Array{Bool}: Boolean array indicating which bands of the data to keep and\n\nprocess.\n\nrefl_nodata::Float64: The no-data value used in the reflectance data.\n\nReturns\n\nA tuple containing:\nimg_dat::Array{Float64}: The filtered reflectance data for the specified line and\ngood bands. If no valid data exists, this will be nothing.\nunc_dat::Array{Float64}: The uncertainty data, filtered similarly. If no uncertainty\ndata is loaded or valid, this will be nothing.\ngood_data: A boolean array indicating which pixels contain valid reflectance data.\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting-Functions","page":"API","title":"Plotting Functions","text":"","category":"section"},{"location":"api/#SpectralUnmixing.plot_mean_endmembers","page":"API","title":"SpectralUnmixing.plot_mean_endmembers","text":"plot_mean_endmembers(endmember_library::SpectralLibrary; output_name::String=\"\")\n\nPlot the mean spectra of endmembers of each class from a spectral library.\n\nSaves file to output_name if provided, otherwise defaults to no saving.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.plot_endmembers","page":"API","title":"SpectralUnmixing.plot_endmembers","text":"plot_endmembers(endmember_library::SpectralLibrary; output_name::String=\"\")\n\nPlot all endmember spectra from a spectral library.\n\nEndmember spectra are colored and labeled by class.\nSaves file to output_name if provided, otherwise defaults to no saving.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.plot_endmembers_individually","page":"API","title":"SpectralUnmixing.plot_endmembers_individually","text":"plot_endmembers_individually(endmember_library::SpectralLibrary;\noutput_name::String=\"\", legend_on::Bool=false)\n\nPlot all endmember spectra individually from a spectral library, grouped by class.\n\nCreate seperate plots for each class, legends are disabled by default.\nSaves file to output_name if provided, otherwise defaults to no saving.\n\n\n\n\n\n","category":"function"},{"location":"api/#Solver-Functions","page":"API","title":"Solver Functions","text":"","category":"section"},{"location":"api/#SpectralUnmixing.opt_solve","page":"API","title":"SpectralUnmixing.opt_solve","text":"opt_solve(A::Matrix{Float64}, b::Vector{Float64}, x0::Vector{Float64},\nlb::Vector{Float64}, ub::Vector{Float64})\n\nSolve a nonlinear least squares problem, finding the vector x subject to lower (lb) and upper (ub) bounds, that minimizes the residual ||Ax - b||² using the NLopt library's implementation of the SLSQP algorithm.\n\nArguments\n\nA::Matrix{Float64}: Coefficient matrix of size (m, n).\nb::Vector{Float64}: Target vector of size (m,).\nx0::Vector{Float64}: Initial guess vector of size (n,) for the optimization variables.\n\nValues will be clipped to the range [0, 1].\n\nlb::Vector{Float64}: Vector of size (n,) specifying the lower bounds for the\n\noptimization variables.\n\nub::Vector{Float64}: Vector of size (n,) specifying the upper bounds for the\n\noptimization variables.\n\nReturns\n\nA tuple containing:\nx: The optimized values of the variables x (vector of size (n,)).\nmse_opt: The exponential of the objective function value at the optimum.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.dolsq","page":"API","title":"SpectralUnmixing.dolsq","text":"dolsq(A, b; method::String=\"default\")\n\nSolve a least squares problem, finding the vector x that minimizes the residual ||Ax - b||².\n\nArguments\n\nA: Coefficient matrix of size (m, n).\nb: Target vector of size (m,).\nmethod: An optional keyword argument specifying the solver method.\n\nAvailable options are:     - \"default\": Solve the system using the backslash operator (`).     -\"pinv\": Use the pseudoinverse ofAto compute the solution.     -\"qr\"`: Use QR decomposition to solve the least squares problem.\n\nReturns\n\nx: Vector of size (n,) that minimizes the least squares residual.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.bvls","page":"API","title":"SpectralUnmixing.bvls","text":"bvls(A, b, x_lsq, lb, ub, tol::Float64, max_iter::Int64, verbose::Int64,\n     inverse_method::String)\n\nSolve a bounded value least squares problem, finding the vector x subject to lower (lb) and upper (ub) bounds, that minimizes the residual ||Ax - b||².\n\nThe function employs an iterative approach, adjusting the solution based on the specified bounds.\nConvergence is determined by whether KKT optimality condition (see\n\ncompute_kkt_optimality) is within the specified tolerance.\n\nArguments\n\nA: Coefficient matrix of size (m, n).\nb: Target vector of size (m,).\nx_lsq: Initial guess vector of size (n,) for the optimization variables.\nlb: Vector of size (n,) specifying the lower bounds for the\n\noptimization variables.\n\nub: Vector of size (n,) specifying the upper bounds for the\n\noptimization variables.\n\ntol::Float64: Tolerance for convergence of the optimization.\nmax_iter::Int64: Maximum number of iterations allowed. If not specified, defaults to n.\nverbose::Int64: Verbosity of output (0, 1, or 2).\ninverse_method::String: Least squares solver method, see dolsq for options.\n\nReturns\n\nA tuple containing:\nx: Vector of size (n,) that minimizes the least squares residual.\ncost: The final cost function value of the minimized sum of squared residuals.\n\nNotes\n\nReference:  https://www.stat.berkeley.edu/~stark/Preprints/bvls.pdf\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.compute_kkt_optimality","page":"API","title":"SpectralUnmixing.compute_kkt_optimality","text":"compute_kkt_optimality(g::Vector{Float64}, on_bound::Vector)\n\nComputes the Karush-Kuhn-Tucker (KKT) optimality condition value for a given gradient vector and a vector indicating which variables are on bounds.\n\nReturns a value representing the maximum KKT condition across all variables\n\nArguments\n\ng: A vector of size (n,) representing the gradient of the objective function at the current point.\non_bound: A vector of size (n,) indicating the status of each variable:\n-1 if the variable is at its lower bound,\n1 if the variable is at its upper bound,\n0 if the variable is free (not constrained).\n\n\n\n\n\n","category":"function"},{"location":"api/#Utility-Functions","page":"API","title":"Utility Functions","text":"","category":"section"},{"location":"api/#SpectralUnmixing.wl_index","page":"API","title":"SpectralUnmixing.wl_index","text":"wl_index(wavelengths::Vector{Float64}, target::Float64)\n\nReturn the index of the wavelength in a vector that is closest to the specified target wavelength.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.nanargmax","page":"API","title":"SpectralUnmixing.nanargmax","text":"nanargmin(input::Array)\n\nReturn the index of the minimum value in the input array, ignoring NaN values.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpectralUnmixing.nanargmin","page":"API","title":"SpectralUnmixing.nanargmin","text":"nanargmin(input::Array)\n\nReturn the index of the maximum value in the input array, ignoring NaN values.\n\n\n\n\n\n","category":"function"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Thank you for your interest in contributing to SpectralUnmixing. If you are just getting started, please review the guidelines below to understand how and where you can best support and contribute to this project.  Typical contributions may include:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Code patches\nFeature enhancements\nDocumentation improvements\nBug reports","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you have ideas for new additions, that's great - please contact the maintainers at the addresses given below, and we can coordinate efforts.  Our general policy is to for the maintainers to delegate technical authority to individuals to make changes and additions to specific topics.","category":"page"},{"location":"contributing/#Getting-Started","page":"Contributing","title":"Getting Started","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"First of all, to get a sense of the project's current status and roadmap, please be sure to spend some time reviewing issues in the issue tracker.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you have have discovered a new issue or task, then go ahead and create a new issue.","category":"page"},{"location":"contributing/#Fork-and-Create-a-Branch","page":"Contributing","title":"Fork and Create a Branch","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"SpectralUnmixing follows the Standard Fork and Pull Request workflow.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"When you have chosen an issue to work on, start by forking the repo.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Then, create a branch with a descriptive name.  A good branch name starts with the issue number you are working on followed by some descriptive text.  For example, if you are working on issue #113 you would run:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"  git checkout -b 113-add-spectral-residual","category":"page"},{"location":"contributing/#Testing","page":"Contributing","title":"Testing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Tests live in the test/ directory and are executed using","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia --project=@. -e 'using Pkg; Pkg.test()'","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Our development strategy employs continuous integration and unit testing to validate all changes.  We appreciate you writing additional tests for new modifications or features.  Depending on the significance of your changes, additional tests on real data may be requested.","category":"page"},{"location":"contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Any changes, especially user-visible ones, should be accompanied by updates to docstrings so they are visible in the package's HTML documentation. You may also need to update the source files for the documentation in docs/src/ if e.g. you are adding a new public function to the package.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The HTML documentation is built using Documenter.jl. Please do a local build of the documentation after making your changes to ensure no errors occur. Run the following from the SpectralUnmixing.jl root directory to build the documentation of your local copy of the package:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"julia --project=docs/\n# press ] to enter Pkg\n(docs) pkg> dev .\njulia> include(\"docs/make.jl\")","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If no errors occur, the HTML files will be generated in docs/build/.","category":"page"},{"location":"contributing/#Implement-Your-Changes-and-Create-a-Pull-Request","page":"Contributing","title":"Implement Your Changes and Create a Pull Request","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"At this point, you are ready to implement your changes!","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"As you develop, you should make sure that your branch doesn't veer too far from SpectralUnmixing's dev branch.  To do this, switch back to your dev branch and make sure it's up to date with SpectralUnmixing's dev branch:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"  git remote add upstream https://github.com/emit-sds/SpectralUnmixing.git\n  git checkout dev\n  git pull upstream dev","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Then update your feature branch from your local copy of dev, and push it!  We recommend using git's rebase call when possible.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"  git checkout 113-add-spectral-residual\n  git rebase dev\n  git push --set-upstream origin 113-add-spectral-residual","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"When you are ready to submit your changes back to the SpectralUnmixing repo, go to GitHub and make a Pull Request.","category":"page"},{"location":"contributing/#Keeping-your-Pull-Request-Updated","page":"Contributing","title":"Keeping your Pull Request Updated","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If a maintainer asks you to \"rebase\" your PR, they're saying that a lot of code has changed, and that you need to update your branch so it's easier to merge.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Here's the suggested workflow:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"  git checkout 113-add-spectral-residual\n  git pull --rebase upstream dev\n  git push --force-with-lease 113-add-spectral-residual","category":"page"},{"location":"contributing/#Project-Decision-Making","page":"Contributing","title":"Project Decision Making","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Minor changes follow an expedited acceptance process.  These are things like:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Bug fixes\nUnit tests\nDocumentation\nConsolidation that does not change algorithm results or provide significant new functionality\nNew functionality initiated by maintainers, or over which authority has been delegated in advance by maintainers (e.g. through issue assignment)","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Minor change pull requests are accepted once they:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Pass unit tests and adhere to project coding conventions\nGet signoff from at least one maintainer, with no objections from any other maintainer","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Accepted minor changes will be released in the next major or minor release version. Hotfixes will be expedited as needed.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Major changes include:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"New functionality, including examples, data, and algorithm changes, over which authority was not delegated in advance.\nOfficial releases\nProject policy updates","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"These are accepted through consensus of a quorum of maintainers.  If you would like to include any new algorithms or examples, we highly recommend that they are supported by peer reviewed scientific research.","category":"page"},{"location":"contributing/#Release-Steps-(for-Maintainers)","page":"Contributing","title":"Release Steps (for Maintainers)","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"New releases need to be registered with Julia's official registry prior to being tagged. Therefore, the revised steps for versioning are:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Commit a version number increment in Project.toml to branch dev\nTrigger a PR from dev -> main\nAccept the PR\nComment on the above merge commit with the release notes as follows:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"@JuliaRegistrator register\n\nRelease notes:\n\n## What's Changed\n* Github auto-generated release notes from a release draft\n","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Wait for registration of the new release to complete (can take a few days)\nGo to https://github.com/emit-sds/SpectralUnmixing.jl/releases\nClick \"Draft a new release\"\nEnter tag version as \"vX.Y.Z\" (depending on latest version), use tag version as release title, and auto-generate release notes\nClick \"Publish release\"","category":"page"},{"location":"contributing/#Contributors","page":"Contributing","title":"Contributors","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The github maintainers, responsible for handling pull requests, are:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Philip G. Brodrick philip.brodrick@jpl.nasa.gov\nVatsal Jhalani (NASA JPL)","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Thanks to the following regular contributors:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Francisco Ochoa (UCLA)","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The SpectralUnmixing codebase was made possible with support from the Earth Surface Mineral Dust Source Investigation (EMIT), an Earth Ventures-Instrument (EV4) Mission. The initial research took place at the Jet Propulsion Laboratory, California Institute of Technology, 4800 Oak Grove Dr., Pasadena, CA 91109 USA.","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Examples of SpectralUnmixing usage can be found in the examples folder.","category":"page"},{"location":"#SpectralUnmixing.jl","page":"Introduction","title":"SpectralUnmixing.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: version) (Image: ) (Image: )","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A general, fast, flexible, and including spectral unmixing package.  Oriented towards VSWIR imaging spectroscopy data but applicable for different sensor types.  Includes options for different treatments of endmember library assemblages, including MESMA and bootstrapping (aka monte carlo) strategies.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is registered and may be added using:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia 'using Pkg; Pkg.add(\"SpectralUnmixing\")'","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Remember to use the –project flag or to set the JULIA_PROJECT environment variable to activate the appropriate environment.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you would like to install a local version of the repository, first pull a local copy and navigate into the base SpectralUnmixing directory.  Then run:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --project='.' -e 'using Pkg; Pkg.activate(\".\");'\nexport JULIA_PROJECT=${PWD}","category":"page"},{"location":"#Using-the-script","page":"Introduction","title":"Using the script","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Currently the package supports reading and writing ENVI raster data.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Basic:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia unmix.jl REFLECTANCE_IMAGE ENDMEMBER_LIBRARY ENDMEMBER_COLUMN OUTPUT_BASE --mode sma","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Parallel implementation (with 10 cores):","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia -p 10 unmix.jl REFLECTANCE_IMAGE ENDMEMBER_LIBRARY ENDMEMBER_COLUMN OUTPUT_BASE --mode sma","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Bootstrapping uncertainty:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia -p 10 unmix.jl REFLECTANCE_IMAGE ENDMEMBER_LIBRARY ENDMEMBER_COLUMN OUTPUT_BASE --mode sma --n_mc 50","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Normalization:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia -p 10 unmix.jl REFLECTANCE_IMAGE ENDMEMBER_LIBRARY ENDMEMBER_COLUMN OUTPUT_BASE --mode sma --n_mc 50 --normalization brightness","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Preset maximum number of endmembers used for unmixing:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia -p 10 unmix.jl REFLECTANCE_IMAGE ENDMEMBER_LIBRARY ENDMEMBER_COLUMN OUTPUT_BASE --mode sma --n_mc 50 --normalization brightness --num_endmembers 10","category":"page"},{"location":"#EMIT-style-Runs","page":"Introduction","title":"EMIT-style Runs","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Following Ochoa et al., to run SpectralUnmixing in the same manner as EMIT, use:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia -p 64 unmix.jl REFLECTANCE_IMAGE ENDMEMBER_LIBRARY ENDMEMBER_COLUMN OUTPUT_BASE --mode sma-best --normalization brightness --num_endmember 30 --n_mc 20 --reflectance_uncertainty_file REFLECTANCE_UNCERTAINTY_IMAGE","category":"page"}]
}
